{"version":3,"file":"static/js/563.e8eb11e1.chunk.js","mappings":"+PACA,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA+F,uBAA/F,EAAgI,sBAAhI,EAAiK,uB,SCMlJ,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBV,OAhBEE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,sGAEVN,GAAW,GAFD,UAGaO,EAAAA,EAAAA,IAAaJ,GAH1B,gBAGFN,EAHE,EAGFA,KACRC,EAAQD,GAJE,gDAMVK,EAAS,EAAD,IANE,yBAQVF,GAAW,GARD,4EAAH,qDAWbM,GACD,GAAE,CAACH,KAIJ,iBAAKK,UAAWC,EAAhB,UACGV,IAAW,SAACW,EAAA,EAAD,IACXT,IAAS,4CACV,eAAIO,UAAWC,EAAf,SACKZ,GAAQA,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACd,gBAAIP,UAAWC,EAAf,WACI,0BACA,gBAAKD,UAAWC,EAAaO,IAAKH,EAAY,yCAAqCA,G,69TACnFI,IAAKH,EACLI,MAAM,MACNC,OAAO,QAGP,4BACA,cAAGX,UAAWC,EAAd,SAA6BK,KAC7B,uCAAeC,UAVeH,EADpB,QAkBvB,C","sources":["webpack://react-homework-template/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castInfo\":\"Cast_castInfo__UHCIA\",\"castList\":\"Cast_castList__hbalY\",\"castLink\":\"Cast_castLink__nCJaJ\",\"castImg\":\"Cast_castImg__9GVFO\",\"castName\":\"Cast_castName__51zqr\"};","import { getMovieCast } from \"shared/Api/Api\"; \nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Loader } from \"components/Loader/Loader\";\nimport noImg from \"..//..//img/No-photo-cast.png\";\nimport css from \"./Cast.module.css\";\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  \n  useEffect(() => {\n    const getCast = async () => {\n      try {\n          setLoading(true);\n          const { cast } = await getMovieCast(movieId);\n          setCast(cast);\n      } catch (e) {\n          setError(e);\n      } finally {\n          setLoading(false);\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n\nreturn (\n  <div className={css.castInfo}>\n    {loading && <Loader />}\n    {error && <p>Something wrong</p>} \n    <ul className={css.castList}>\n        {cast && cast.map(({ id, profile_path, name, character }) => (\n            <li className={css.castLink} key={id}>\n                <div>\n                <img className={css.castImg} src={profile_path ? `https://image.tmdb.org/t/p/w500${profile_path}` : noImg}\n                alt={name}\n                width=\"100\"\n                height=\"\"\n                />\n                </div>\n                <div>\n                <p className={css.castName}>{name}</p>\n                <p>Character: {character}</p>\n                </div>\n            </li>\n        ))}\n    </ul>\n    </div>\n    )\n  }\n"],"names":["Cast","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getCast","getMovieCast","className","css","Loader","map","id","profile_path","name","character","src","alt","width","height"],"sourceRoot":""}